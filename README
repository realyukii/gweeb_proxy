A simple tcp proxy server that forward a connection to the specified destination address:port.

This repository is part of GNU/Weeb challanges. For more information, see: https://t.me/GNUWeeb/1174779

stress test with gwhttpd:
ab -k -n 40000 -c 20000 http://[::1]:8080/zero & ab -k -n 40000 -c 20000 http://127.0.0.1:8080/zero

40.000 HTTP request with 20.000 concurrent connection, each connection sent multiple request (possible by using keep-alive flag, -k)

some tweak is needed:
- sudo sysctl net.ipv4.ip_local_port_range="4000 65535"
see: https://t.me/GNUWeeb/1174855

UPDATE: https://t.me/GNUWeeb/1176752
the project is extended to support socks5 proxy, see the help message for usage.

Key Features of The Program:
- real-time hot reload auth config, watch and monitor content of authentication file with inotify.
- SOCKS5 protocol support: CONNECT command, BIND and UDP ASSOCIATE is not yet supported.
- non blocking and I/O multiplexing for handling concurrent connection with epoll.
- maximum performance with parallel execution by utilizing multi-threading support with pthread API.
- signal handler, to perform graceful exit
- resolve FQDN asynchronously, on-the-fly with glibc's getaddrinfo function
- handle currently-identified edge/corner cases:
	* short recv: fewer bytes partially received than requested
	* short send: fewer bytes partially sent than requested
- controllable program, currently it allow the user to specify:
	* connection time out interval
	* proxy mode: socks5/simple tcp proxy
	* pre-allocated buffer to store pointer of established session
	* number of thread to spawn that communicating with client
	* specifying local address and local port is required
	* on socks5 mode: authentication method with username/password
	* on simple mode: specifying remote address and remote port for target is required
	* controllable client and target (recv/send) buffer size, convenient for testing performance.

Features in my Wish list:
- built-in DNS cache
- connect race for when domain name is provided
- corner cases
	* pause incoming connection from accept when open file descriptor reach max limit
- use assert to make sure the logic is rock solid, and we can evaluate the logic if turns out the assert fail and program aborted.

Cool technical stuff used in the codebase:
1. utilization of the fact that most of pointer address is 48-bit sized.
by knowing this common sense, we can smuggle a flag in the pointer stored in 64-bit sized variable with bitmask technique using bitwise operator.

2. Signaling mechanism to communicate between threads.
with pthread_cond_t and eventfd, you can communicate between threads!
use mutex for locking mechanism, thus didn't have to fear about race condition.

3. C11 features
since the codebase use atomic data type, it require the compiler to follow C11 standard to be able to compile.

4. use refcount!
you don't have to worry about use-after-free with this mechanism!

5. queue data structure
the codebase use queue to create producer/consumer pattern for submitting new dns query request, the consumer is the domain resolver thread
and the producer is the client that want to produce new dns query request.

with this data structure, you can spawn as many domain resolver thread as you want and use single queue, that shared across threads and represent the pending, unprocessed dns query requests.
